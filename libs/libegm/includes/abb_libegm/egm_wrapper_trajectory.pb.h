// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egm_wrapper_trajectory.proto

#ifndef PROTOBUF_INCLUDED_egm_5fwrapper_5ftrajectory_2eproto
#define PROTOBUF_INCLUDED_egm_5fwrapper_5ftrajectory_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "egm_wrapper.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_egm_5fwrapper_5ftrajectory_2eproto 

namespace protobuf_egm_5fwrapper_5ftrajectory_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_egm_5fwrapper_5ftrajectory_2eproto
namespace abb {
namespace egm {
namespace wrapper {
namespace trajectory {
class CartesianGoal;
class CartesianGoalDefaultTypeInternal;
extern CartesianGoalDefaultTypeInternal _CartesianGoal_default_instance_;
class ExecutionProgress;
class ExecutionProgressDefaultTypeInternal;
extern ExecutionProgressDefaultTypeInternal _ExecutionProgress_default_instance_;
class ExternalGoal;
class ExternalGoalDefaultTypeInternal;
extern ExternalGoalDefaultTypeInternal _ExternalGoal_default_instance_;
class JointGoal;
class JointGoalDefaultTypeInternal;
extern JointGoalDefaultTypeInternal _JointGoal_default_instance_;
class PointGoal;
class PointGoalDefaultTypeInternal;
extern PointGoalDefaultTypeInternal _PointGoal_default_instance_;
class RobotGoal;
class RobotGoalDefaultTypeInternal;
extern RobotGoalDefaultTypeInternal _RobotGoal_default_instance_;
class RobotPositionGoal;
class RobotPositionGoalDefaultTypeInternal;
extern RobotPositionGoalDefaultTypeInternal _RobotPositionGoal_default_instance_;
class RobotVelocityGoal;
class RobotVelocityGoalDefaultTypeInternal;
extern RobotVelocityGoalDefaultTypeInternal _RobotVelocityGoal_default_instance_;
class StaticPositionGoal;
class StaticPositionGoalDefaultTypeInternal;
extern StaticPositionGoalDefaultTypeInternal _StaticPositionGoal_default_instance_;
class StaticVelocityGoal;
class StaticVelocityGoalDefaultTypeInternal;
extern StaticVelocityGoalDefaultTypeInternal _StaticVelocityGoal_default_instance_;
class TrajectoryGoal;
class TrajectoryGoalDefaultTypeInternal;
extern TrajectoryGoalDefaultTypeInternal _TrajectoryGoal_default_instance_;
}  // namespace trajectory
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
namespace google {
namespace protobuf {
template<> ::abb::egm::wrapper::trajectory::CartesianGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::CartesianGoal>(Arena*);
template<> ::abb::egm::wrapper::trajectory::ExecutionProgress* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::ExecutionProgress>(Arena*);
template<> ::abb::egm::wrapper::trajectory::ExternalGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::ExternalGoal>(Arena*);
template<> ::abb::egm::wrapper::trajectory::JointGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::JointGoal>(Arena*);
template<> ::abb::egm::wrapper::trajectory::PointGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::PointGoal>(Arena*);
template<> ::abb::egm::wrapper::trajectory::RobotGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::RobotGoal>(Arena*);
template<> ::abb::egm::wrapper::trajectory::RobotPositionGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::RobotPositionGoal>(Arena*);
template<> ::abb::egm::wrapper::trajectory::RobotVelocityGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::RobotVelocityGoal>(Arena*);
template<> ::abb::egm::wrapper::trajectory::StaticPositionGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::StaticPositionGoal>(Arena*);
template<> ::abb::egm::wrapper::trajectory::StaticVelocityGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::StaticVelocityGoal>(Arena*);
template<> ::abb::egm::wrapper::trajectory::TrajectoryGoal* Arena::CreateMaybeMessage<::abb::egm::wrapper::trajectory::TrajectoryGoal>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace abb {
namespace egm {
namespace wrapper {
namespace trajectory {

enum ExecutionProgress_State {
  ExecutionProgress_State_UNDEFINED = 0,
  ExecutionProgress_State_NORMAL = 1,
  ExecutionProgress_State_RAMP_DOWN = 2,
  ExecutionProgress_State_STATIC_GOAL = 3
};
bool ExecutionProgress_State_IsValid(int value);
const ExecutionProgress_State ExecutionProgress_State_State_MIN = ExecutionProgress_State_UNDEFINED;
const ExecutionProgress_State ExecutionProgress_State_State_MAX = ExecutionProgress_State_STATIC_GOAL;
const int ExecutionProgress_State_State_ARRAYSIZE = ExecutionProgress_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecutionProgress_State_descriptor();
inline const ::std::string& ExecutionProgress_State_Name(ExecutionProgress_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecutionProgress_State_descriptor(), value);
}
inline bool ExecutionProgress_State_Parse(
    const ::std::string& name, ExecutionProgress_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionProgress_State>(
    ExecutionProgress_State_descriptor(), name, value);
}
enum ExecutionProgress_SubState {
  ExecutionProgress_SubState_NONE = 0,
  ExecutionProgress_SubState_RUNNING = 1,
  ExecutionProgress_SubState_FINISHED = 2
};
bool ExecutionProgress_SubState_IsValid(int value);
const ExecutionProgress_SubState ExecutionProgress_SubState_SubState_MIN = ExecutionProgress_SubState_NONE;
const ExecutionProgress_SubState ExecutionProgress_SubState_SubState_MAX = ExecutionProgress_SubState_FINISHED;
const int ExecutionProgress_SubState_SubState_ARRAYSIZE = ExecutionProgress_SubState_SubState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecutionProgress_SubState_descriptor();
inline const ::std::string& ExecutionProgress_SubState_Name(ExecutionProgress_SubState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecutionProgress_SubState_descriptor(), value);
}
inline bool ExecutionProgress_SubState_Parse(
    const ::std::string& name, ExecutionProgress_SubState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionProgress_SubState>(
    ExecutionProgress_SubState_descriptor(), name, value);
}
// ===================================================================

class JointGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.JointGoal) */ {
 public:
  JointGoal();
  virtual ~JointGoal();

  JointGoal(const JointGoal& from);

  inline JointGoal& operator=(const JointGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JointGoal(JointGoal&& from) noexcept
    : JointGoal() {
    *this = ::std::move(from);
  }

  inline JointGoal& operator=(JointGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointGoal* internal_default_instance() {
    return reinterpret_cast<const JointGoal*>(
               &_JointGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(JointGoal* other);
  friend void swap(JointGoal& a, JointGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JointGoal* New() const final {
    return CreateMaybeMessage<JointGoal>(NULL);
  }

  JointGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JointGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JointGoal& from);
  void MergeFrom(const JointGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.Joints position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::abb::egm::wrapper::Joints& _internal_position() const;
  public:
  const ::abb::egm::wrapper::Joints& position() const;
  ::abb::egm::wrapper::Joints* release_position();
  ::abb::egm::wrapper::Joints* mutable_position();
  void set_allocated_position(::abb::egm::wrapper::Joints* position);

  // optional .abb.egm.wrapper.Joints velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  private:
  const ::abb::egm::wrapper::Joints& _internal_velocity() const;
  public:
  const ::abb::egm::wrapper::Joints& velocity() const;
  ::abb::egm::wrapper::Joints* release_velocity();
  ::abb::egm::wrapper::Joints* mutable_velocity();
  void set_allocated_velocity(::abb::egm::wrapper::Joints* velocity);

  // optional .abb.egm.wrapper.Joints acceleration = 3;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 3;
  private:
  const ::abb::egm::wrapper::Joints& _internal_acceleration() const;
  public:
  const ::abb::egm::wrapper::Joints& acceleration() const;
  ::abb::egm::wrapper::Joints* release_acceleration();
  ::abb::egm::wrapper::Joints* mutable_acceleration();
  void set_allocated_acceleration(::abb::egm::wrapper::Joints* acceleration);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.JointGoal)
 private:
  void set_has_position();
  void clear_has_position();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_acceleration();
  void clear_has_acceleration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Joints* position_;
  ::abb::egm::wrapper::Joints* velocity_;
  ::abb::egm::wrapper::Joints* acceleration_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CartesianGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.CartesianGoal) */ {
 public:
  CartesianGoal();
  virtual ~CartesianGoal();

  CartesianGoal(const CartesianGoal& from);

  inline CartesianGoal& operator=(const CartesianGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CartesianGoal(CartesianGoal&& from) noexcept
    : CartesianGoal() {
    *this = ::std::move(from);
  }

  inline CartesianGoal& operator=(CartesianGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CartesianGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartesianGoal* internal_default_instance() {
    return reinterpret_cast<const CartesianGoal*>(
               &_CartesianGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CartesianGoal* other);
  friend void swap(CartesianGoal& a, CartesianGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CartesianGoal* New() const final {
    return CreateMaybeMessage<CartesianGoal>(NULL);
  }

  CartesianGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CartesianGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CartesianGoal& from);
  void MergeFrom(const CartesianGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.CartesianPose pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  private:
  const ::abb::egm::wrapper::CartesianPose& _internal_pose() const;
  public:
  const ::abb::egm::wrapper::CartesianPose& pose() const;
  ::abb::egm::wrapper::CartesianPose* release_pose();
  ::abb::egm::wrapper::CartesianPose* mutable_pose();
  void set_allocated_pose(::abb::egm::wrapper::CartesianPose* pose);

  // optional .abb.egm.wrapper.Cartesian velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  private:
  const ::abb::egm::wrapper::Cartesian& _internal_velocity() const;
  public:
  const ::abb::egm::wrapper::Cartesian& velocity() const;
  ::abb::egm::wrapper::Cartesian* release_velocity();
  ::abb::egm::wrapper::Cartesian* mutable_velocity();
  void set_allocated_velocity(::abb::egm::wrapper::Cartesian* velocity);

  // optional .abb.egm.wrapper.Cartesian acceleration = 3;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 3;
  private:
  const ::abb::egm::wrapper::Cartesian& _internal_acceleration() const;
  public:
  const ::abb::egm::wrapper::Cartesian& acceleration() const;
  ::abb::egm::wrapper::Cartesian* release_acceleration();
  ::abb::egm::wrapper::Cartesian* mutable_acceleration();
  void set_allocated_acceleration(::abb::egm::wrapper::Cartesian* acceleration);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.CartesianGoal)
 private:
  void set_has_pose();
  void clear_has_pose();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_acceleration();
  void clear_has_acceleration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::CartesianPose* pose_;
  ::abb::egm::wrapper::Cartesian* velocity_;
  ::abb::egm::wrapper::Cartesian* acceleration_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RobotGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.RobotGoal) */ {
 public:
  RobotGoal();
  virtual ~RobotGoal();

  RobotGoal(const RobotGoal& from);

  inline RobotGoal& operator=(const RobotGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotGoal(RobotGoal&& from) noexcept
    : RobotGoal() {
    *this = ::std::move(from);
  }

  inline RobotGoal& operator=(RobotGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotGoal* internal_default_instance() {
    return reinterpret_cast<const RobotGoal*>(
               &_RobotGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RobotGoal* other);
  friend void swap(RobotGoal& a, RobotGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotGoal* New() const final {
    return CreateMaybeMessage<RobotGoal>(NULL);
  }

  RobotGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RobotGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RobotGoal& from);
  void MergeFrom(const RobotGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  bool has_joints() const;
  void clear_joints();
  static const int kJointsFieldNumber = 1;
  private:
  const ::abb::egm::wrapper::trajectory::JointGoal& _internal_joints() const;
  public:
  const ::abb::egm::wrapper::trajectory::JointGoal& joints() const;
  ::abb::egm::wrapper::trajectory::JointGoal* release_joints();
  ::abb::egm::wrapper::trajectory::JointGoal* mutable_joints();
  void set_allocated_joints(::abb::egm::wrapper::trajectory::JointGoal* joints);

  // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
  bool has_cartesian() const;
  void clear_cartesian();
  static const int kCartesianFieldNumber = 2;
  private:
  const ::abb::egm::wrapper::trajectory::CartesianGoal& _internal_cartesian() const;
  public:
  const ::abb::egm::wrapper::trajectory::CartesianGoal& cartesian() const;
  ::abb::egm::wrapper::trajectory::CartesianGoal* release_cartesian();
  ::abb::egm::wrapper::trajectory::CartesianGoal* mutable_cartesian();
  void set_allocated_cartesian(::abb::egm::wrapper::trajectory::CartesianGoal* cartesian);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.RobotGoal)
 private:
  void set_has_joints();
  void clear_has_joints();
  void set_has_cartesian();
  void clear_has_cartesian();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::trajectory::JointGoal* joints_;
  ::abb::egm::wrapper::trajectory::CartesianGoal* cartesian_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternalGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.ExternalGoal) */ {
 public:
  ExternalGoal();
  virtual ~ExternalGoal();

  ExternalGoal(const ExternalGoal& from);

  inline ExternalGoal& operator=(const ExternalGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalGoal(ExternalGoal&& from) noexcept
    : ExternalGoal() {
    *this = ::std::move(from);
  }

  inline ExternalGoal& operator=(ExternalGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalGoal* internal_default_instance() {
    return reinterpret_cast<const ExternalGoal*>(
               &_ExternalGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ExternalGoal* other);
  friend void swap(ExternalGoal& a, ExternalGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalGoal* New() const final {
    return CreateMaybeMessage<ExternalGoal>(NULL);
  }

  ExternalGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternalGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExternalGoal& from);
  void MergeFrom(const ExternalGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  bool has_joints() const;
  void clear_joints();
  static const int kJointsFieldNumber = 1;
  private:
  const ::abb::egm::wrapper::trajectory::JointGoal& _internal_joints() const;
  public:
  const ::abb::egm::wrapper::trajectory::JointGoal& joints() const;
  ::abb::egm::wrapper::trajectory::JointGoal* release_joints();
  ::abb::egm::wrapper::trajectory::JointGoal* mutable_joints();
  void set_allocated_joints(::abb::egm::wrapper::trajectory::JointGoal* joints);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.ExternalGoal)
 private:
  void set_has_joints();
  void clear_has_joints();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::trajectory::JointGoal* joints_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.PointGoal) */ {
 public:
  PointGoal();
  virtual ~PointGoal();

  PointGoal(const PointGoal& from);

  inline PointGoal& operator=(const PointGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointGoal(PointGoal&& from) noexcept
    : PointGoal() {
    *this = ::std::move(from);
  }

  inline PointGoal& operator=(PointGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointGoal* internal_default_instance() {
    return reinterpret_cast<const PointGoal*>(
               &_PointGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PointGoal* other);
  friend void swap(PointGoal& a, PointGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointGoal* New() const final {
    return CreateMaybeMessage<PointGoal>(NULL);
  }

  PointGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointGoal& from);
  void MergeFrom(const PointGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
  bool has_robot() const;
  void clear_robot();
  static const int kRobotFieldNumber = 2;
  private:
  const ::abb::egm::wrapper::trajectory::RobotGoal& _internal_robot() const;
  public:
  const ::abb::egm::wrapper::trajectory::RobotGoal& robot() const;
  ::abb::egm::wrapper::trajectory::RobotGoal* release_robot();
  ::abb::egm::wrapper::trajectory::RobotGoal* mutable_robot();
  void set_allocated_robot(::abb::egm::wrapper::trajectory::RobotGoal* robot);

  // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
  bool has_external() const;
  void clear_external();
  static const int kExternalFieldNumber = 3;
  private:
  const ::abb::egm::wrapper::trajectory::ExternalGoal& _internal_external() const;
  public:
  const ::abb::egm::wrapper::trajectory::ExternalGoal& external() const;
  ::abb::egm::wrapper::trajectory::ExternalGoal* release_external();
  ::abb::egm::wrapper::trajectory::ExternalGoal* mutable_external();
  void set_allocated_external(::abb::egm::wrapper::trajectory::ExternalGoal* external);

  // optional double duration = 1;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  double duration() const;
  void set_duration(double value);

  // optional bool reach = 4;
  bool has_reach() const;
  void clear_reach();
  static const int kReachFieldNumber = 4;
  bool reach() const;
  void set_reach(bool value);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.PointGoal)
 private:
  void set_has_duration();
  void clear_has_duration();
  void set_has_robot();
  void clear_has_robot();
  void set_has_external();
  void clear_has_external();
  void set_has_reach();
  void clear_has_reach();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::trajectory::RobotGoal* robot_;
  ::abb::egm::wrapper::trajectory::ExternalGoal* external_;
  double duration_;
  bool reach_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RobotPositionGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.RobotPositionGoal) */ {
 public:
  RobotPositionGoal();
  virtual ~RobotPositionGoal();

  RobotPositionGoal(const RobotPositionGoal& from);

  inline RobotPositionGoal& operator=(const RobotPositionGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotPositionGoal(RobotPositionGoal&& from) noexcept
    : RobotPositionGoal() {
    *this = ::std::move(from);
  }

  inline RobotPositionGoal& operator=(RobotPositionGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotPositionGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotPositionGoal* internal_default_instance() {
    return reinterpret_cast<const RobotPositionGoal*>(
               &_RobotPositionGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RobotPositionGoal* other);
  friend void swap(RobotPositionGoal& a, RobotPositionGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotPositionGoal* New() const final {
    return CreateMaybeMessage<RobotPositionGoal>(NULL);
  }

  RobotPositionGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RobotPositionGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RobotPositionGoal& from);
  void MergeFrom(const RobotPositionGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotPositionGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.Joints joints = 1;
  bool has_joints() const;
  void clear_joints();
  static const int kJointsFieldNumber = 1;
  private:
  const ::abb::egm::wrapper::Joints& _internal_joints() const;
  public:
  const ::abb::egm::wrapper::Joints& joints() const;
  ::abb::egm::wrapper::Joints* release_joints();
  ::abb::egm::wrapper::Joints* mutable_joints();
  void set_allocated_joints(::abb::egm::wrapper::Joints* joints);

  // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
  bool has_cartesian() const;
  void clear_cartesian();
  static const int kCartesianFieldNumber = 2;
  private:
  const ::abb::egm::wrapper::CartesianPose& _internal_cartesian() const;
  public:
  const ::abb::egm::wrapper::CartesianPose& cartesian() const;
  ::abb::egm::wrapper::CartesianPose* release_cartesian();
  ::abb::egm::wrapper::CartesianPose* mutable_cartesian();
  void set_allocated_cartesian(::abb::egm::wrapper::CartesianPose* cartesian);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.RobotPositionGoal)
 private:
  void set_has_joints();
  void clear_has_joints();
  void set_has_cartesian();
  void clear_has_cartesian();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Joints* joints_;
  ::abb::egm::wrapper::CartesianPose* cartesian_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RobotVelocityGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.RobotVelocityGoal) */ {
 public:
  RobotVelocityGoal();
  virtual ~RobotVelocityGoal();

  RobotVelocityGoal(const RobotVelocityGoal& from);

  inline RobotVelocityGoal& operator=(const RobotVelocityGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotVelocityGoal(RobotVelocityGoal&& from) noexcept
    : RobotVelocityGoal() {
    *this = ::std::move(from);
  }

  inline RobotVelocityGoal& operator=(RobotVelocityGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotVelocityGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotVelocityGoal* internal_default_instance() {
    return reinterpret_cast<const RobotVelocityGoal*>(
               &_RobotVelocityGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RobotVelocityGoal* other);
  friend void swap(RobotVelocityGoal& a, RobotVelocityGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotVelocityGoal* New() const final {
    return CreateMaybeMessage<RobotVelocityGoal>(NULL);
  }

  RobotVelocityGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RobotVelocityGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RobotVelocityGoal& from);
  void MergeFrom(const RobotVelocityGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotVelocityGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.Joints joints = 1;
  bool has_joints() const;
  void clear_joints();
  static const int kJointsFieldNumber = 1;
  private:
  const ::abb::egm::wrapper::Joints& _internal_joints() const;
  public:
  const ::abb::egm::wrapper::Joints& joints() const;
  ::abb::egm::wrapper::Joints* release_joints();
  ::abb::egm::wrapper::Joints* mutable_joints();
  void set_allocated_joints(::abb::egm::wrapper::Joints* joints);

  // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
  bool has_cartesian() const;
  void clear_cartesian();
  static const int kCartesianFieldNumber = 2;
  private:
  const ::abb::egm::wrapper::CartesianVelocity& _internal_cartesian() const;
  public:
  const ::abb::egm::wrapper::CartesianVelocity& cartesian() const;
  ::abb::egm::wrapper::CartesianVelocity* release_cartesian();
  ::abb::egm::wrapper::CartesianVelocity* mutable_cartesian();
  void set_allocated_cartesian(::abb::egm::wrapper::CartesianVelocity* cartesian);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.RobotVelocityGoal)
 private:
  void set_has_joints();
  void clear_has_joints();
  void set_has_cartesian();
  void clear_has_cartesian();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Joints* joints_;
  ::abb::egm::wrapper::CartesianVelocity* cartesian_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.TrajectoryGoal) */ {
 public:
  TrajectoryGoal();
  virtual ~TrajectoryGoal();

  TrajectoryGoal(const TrajectoryGoal& from);

  inline TrajectoryGoal& operator=(const TrajectoryGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryGoal(TrajectoryGoal&& from) noexcept
    : TrajectoryGoal() {
    *this = ::std::move(from);
  }

  inline TrajectoryGoal& operator=(TrajectoryGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryGoal* internal_default_instance() {
    return reinterpret_cast<const TrajectoryGoal*>(
               &_TrajectoryGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TrajectoryGoal* other);
  friend void swap(TrajectoryGoal& a, TrajectoryGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryGoal* New() const final {
    return CreateMaybeMessage<TrajectoryGoal>(NULL);
  }

  TrajectoryGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrajectoryGoal& from);
  void MergeFrom(const TrajectoryGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::abb::egm::wrapper::trajectory::PointGoal* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal >*
      mutable_points();
  const ::abb::egm::wrapper::trajectory::PointGoal& points(int index) const;
  ::abb::egm::wrapper::trajectory::PointGoal* add_points();
  const ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal >&
      points() const;

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.TrajectoryGoal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal > points_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticPositionGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.StaticPositionGoal) */ {
 public:
  StaticPositionGoal();
  virtual ~StaticPositionGoal();

  StaticPositionGoal(const StaticPositionGoal& from);

  inline StaticPositionGoal& operator=(const StaticPositionGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticPositionGoal(StaticPositionGoal&& from) noexcept
    : StaticPositionGoal() {
    *this = ::std::move(from);
  }

  inline StaticPositionGoal& operator=(StaticPositionGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticPositionGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticPositionGoal* internal_default_instance() {
    return reinterpret_cast<const StaticPositionGoal*>(
               &_StaticPositionGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(StaticPositionGoal* other);
  friend void swap(StaticPositionGoal& a, StaticPositionGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticPositionGoal* New() const final {
    return CreateMaybeMessage<StaticPositionGoal>(NULL);
  }

  StaticPositionGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticPositionGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticPositionGoal& from);
  void MergeFrom(const StaticPositionGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticPositionGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
  bool has_robot() const;
  void clear_robot();
  static const int kRobotFieldNumber = 1;
  private:
  const ::abb::egm::wrapper::trajectory::RobotPositionGoal& _internal_robot() const;
  public:
  const ::abb::egm::wrapper::trajectory::RobotPositionGoal& robot() const;
  ::abb::egm::wrapper::trajectory::RobotPositionGoal* release_robot();
  ::abb::egm::wrapper::trajectory::RobotPositionGoal* mutable_robot();
  void set_allocated_robot(::abb::egm::wrapper::trajectory::RobotPositionGoal* robot);

  // optional .abb.egm.wrapper.Joints external = 2;
  bool has_external() const;
  void clear_external();
  static const int kExternalFieldNumber = 2;
  private:
  const ::abb::egm::wrapper::Joints& _internal_external() const;
  public:
  const ::abb::egm::wrapper::Joints& external() const;
  ::abb::egm::wrapper::Joints* release_external();
  ::abb::egm::wrapper::Joints* mutable_external();
  void set_allocated_external(::abb::egm::wrapper::Joints* external);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.StaticPositionGoal)
 private:
  void set_has_robot();
  void clear_has_robot();
  void set_has_external();
  void clear_has_external();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::trajectory::RobotPositionGoal* robot_;
  ::abb::egm::wrapper::Joints* external_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticVelocityGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.StaticVelocityGoal) */ {
 public:
  StaticVelocityGoal();
  virtual ~StaticVelocityGoal();

  StaticVelocityGoal(const StaticVelocityGoal& from);

  inline StaticVelocityGoal& operator=(const StaticVelocityGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticVelocityGoal(StaticVelocityGoal&& from) noexcept
    : StaticVelocityGoal() {
    *this = ::std::move(from);
  }

  inline StaticVelocityGoal& operator=(StaticVelocityGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticVelocityGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticVelocityGoal* internal_default_instance() {
    return reinterpret_cast<const StaticVelocityGoal*>(
               &_StaticVelocityGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(StaticVelocityGoal* other);
  friend void swap(StaticVelocityGoal& a, StaticVelocityGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticVelocityGoal* New() const final {
    return CreateMaybeMessage<StaticVelocityGoal>(NULL);
  }

  StaticVelocityGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticVelocityGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticVelocityGoal& from);
  void MergeFrom(const StaticVelocityGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticVelocityGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
  bool has_robot() const;
  void clear_robot();
  static const int kRobotFieldNumber = 1;
  private:
  const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& _internal_robot() const;
  public:
  const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& robot() const;
  ::abb::egm::wrapper::trajectory::RobotVelocityGoal* release_robot();
  ::abb::egm::wrapper::trajectory::RobotVelocityGoal* mutable_robot();
  void set_allocated_robot(::abb::egm::wrapper::trajectory::RobotVelocityGoal* robot);

  // optional .abb.egm.wrapper.Joints external = 2;
  bool has_external() const;
  void clear_external();
  static const int kExternalFieldNumber = 2;
  private:
  const ::abb::egm::wrapper::Joints& _internal_external() const;
  public:
  const ::abb::egm::wrapper::Joints& external() const;
  ::abb::egm::wrapper::Joints* release_external();
  ::abb::egm::wrapper::Joints* mutable_external();
  void set_allocated_external(::abb::egm::wrapper::Joints* external);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.StaticVelocityGoal)
 private:
  void set_has_robot();
  void clear_has_robot();
  void set_has_external();
  void clear_has_external();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::trajectory::RobotVelocityGoal* robot_;
  ::abb::egm::wrapper::Joints* external_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecutionProgress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.trajectory.ExecutionProgress) */ {
 public:
  ExecutionProgress();
  virtual ~ExecutionProgress();

  ExecutionProgress(const ExecutionProgress& from);

  inline ExecutionProgress& operator=(const ExecutionProgress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionProgress(ExecutionProgress&& from) noexcept
    : ExecutionProgress() {
    *this = ::std::move(from);
  }

  inline ExecutionProgress& operator=(ExecutionProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionProgress* internal_default_instance() {
    return reinterpret_cast<const ExecutionProgress*>(
               &_ExecutionProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ExecutionProgress* other);
  friend void swap(ExecutionProgress& a, ExecutionProgress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionProgress* New() const final {
    return CreateMaybeMessage<ExecutionProgress>(NULL);
  }

  ExecutionProgress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionProgress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionProgress& from);
  void MergeFrom(const ExecutionProgress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionProgress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExecutionProgress_State State;
  static const State UNDEFINED =
    ExecutionProgress_State_UNDEFINED;
  static const State NORMAL =
    ExecutionProgress_State_NORMAL;
  static const State RAMP_DOWN =
    ExecutionProgress_State_RAMP_DOWN;
  static const State STATIC_GOAL =
    ExecutionProgress_State_STATIC_GOAL;
  static inline bool State_IsValid(int value) {
    return ExecutionProgress_State_IsValid(value);
  }
  static const State State_MIN =
    ExecutionProgress_State_State_MIN;
  static const State State_MAX =
    ExecutionProgress_State_State_MAX;
  static const int State_ARRAYSIZE =
    ExecutionProgress_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return ExecutionProgress_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return ExecutionProgress_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return ExecutionProgress_State_Parse(name, value);
  }

  typedef ExecutionProgress_SubState SubState;
  static const SubState NONE =
    ExecutionProgress_SubState_NONE;
  static const SubState RUNNING =
    ExecutionProgress_SubState_RUNNING;
  static const SubState FINISHED =
    ExecutionProgress_SubState_FINISHED;
  static inline bool SubState_IsValid(int value) {
    return ExecutionProgress_SubState_IsValid(value);
  }
  static const SubState SubState_MIN =
    ExecutionProgress_SubState_SubState_MIN;
  static const SubState SubState_MAX =
    ExecutionProgress_SubState_SubState_MAX;
  static const int SubState_ARRAYSIZE =
    ExecutionProgress_SubState_SubState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SubState_descriptor() {
    return ExecutionProgress_SubState_descriptor();
  }
  static inline const ::std::string& SubState_Name(SubState value) {
    return ExecutionProgress_SubState_Name(value);
  }
  static inline bool SubState_Parse(const ::std::string& name,
      SubState* value) {
    return ExecutionProgress_SubState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.Input inputs = 3;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 3;
  private:
  const ::abb::egm::wrapper::Input& _internal_inputs() const;
  public:
  const ::abb::egm::wrapper::Input& inputs() const;
  ::abb::egm::wrapper::Input* release_inputs();
  ::abb::egm::wrapper::Input* mutable_inputs();
  void set_allocated_inputs(::abb::egm::wrapper::Input* inputs);

  // optional .abb.egm.wrapper.Output outputs = 4;
  bool has_outputs() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 4;
  private:
  const ::abb::egm::wrapper::Output& _internal_outputs() const;
  public:
  const ::abb::egm::wrapper::Output& outputs() const;
  ::abb::egm::wrapper::Output* release_outputs();
  ::abb::egm::wrapper::Output* mutable_outputs();
  void set_allocated_outputs(::abb::egm::wrapper::Output* outputs);

  // optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
  bool has_goal() const;
  void clear_goal();
  static const int kGoalFieldNumber = 7;
  private:
  const ::abb::egm::wrapper::trajectory::PointGoal& _internal_goal() const;
  public:
  const ::abb::egm::wrapper::trajectory::PointGoal& goal() const;
  ::abb::egm::wrapper::trajectory::PointGoal* release_goal();
  ::abb::egm::wrapper::trajectory::PointGoal* mutable_goal();
  void set_allocated_goal(::abb::egm::wrapper::trajectory::PointGoal* goal);

  // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
  bool has_active_trajectory() const;
  void clear_active_trajectory();
  static const int kActiveTrajectoryFieldNumber = 8;
  private:
  const ::abb::egm::wrapper::trajectory::TrajectoryGoal& _internal_active_trajectory() const;
  public:
  const ::abb::egm::wrapper::trajectory::TrajectoryGoal& active_trajectory() const;
  ::abb::egm::wrapper::trajectory::TrajectoryGoal* release_active_trajectory();
  ::abb::egm::wrapper::trajectory::TrajectoryGoal* mutable_active_trajectory();
  void set_allocated_active_trajectory(::abb::egm::wrapper::trajectory::TrajectoryGoal* active_trajectory);

  // optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::abb::egm::wrapper::trajectory::ExecutionProgress_State state() const;
  void set_state(::abb::egm::wrapper::trajectory::ExecutionProgress_State value);

  // optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
  bool has_sub_state() const;
  void clear_sub_state();
  static const int kSubStateFieldNumber = 2;
  ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState sub_state() const;
  void set_sub_state(::abb::egm::wrapper::trajectory::ExecutionProgress_SubState value);

  // optional double time_passed = 5;
  bool has_time_passed() const;
  void clear_time_passed();
  static const int kTimePassedFieldNumber = 5;
  double time_passed() const;
  void set_time_passed(double value);

  // optional bool goal_active = 6;
  bool has_goal_active() const;
  void clear_goal_active();
  static const int kGoalActiveFieldNumber = 6;
  bool goal_active() const;
  void set_goal_active(bool value);

  // optional uint32 pending_trajectories = 9;
  bool has_pending_trajectories() const;
  void clear_pending_trajectories();
  static const int kPendingTrajectoriesFieldNumber = 9;
  ::google::protobuf::uint32 pending_trajectories() const;
  void set_pending_trajectories(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.ExecutionProgress)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_sub_state();
  void clear_has_sub_state();
  void set_has_inputs();
  void clear_has_inputs();
  void set_has_outputs();
  void clear_has_outputs();
  void set_has_time_passed();
  void clear_has_time_passed();
  void set_has_goal_active();
  void clear_has_goal_active();
  void set_has_goal();
  void clear_has_goal();
  void set_has_active_trajectory();
  void clear_has_active_trajectory();
  void set_has_pending_trajectories();
  void clear_has_pending_trajectories();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Input* inputs_;
  ::abb::egm::wrapper::Output* outputs_;
  ::abb::egm::wrapper::trajectory::PointGoal* goal_;
  ::abb::egm::wrapper::trajectory::TrajectoryGoal* active_trajectory_;
  int state_;
  int sub_state_;
  double time_passed_;
  bool goal_active_;
  ::google::protobuf::uint32 pending_trajectories_;
  friend struct ::protobuf_egm_5fwrapper_5ftrajectory_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JointGoal

// optional .abb.egm.wrapper.Joints position = 1;
inline bool JointGoal::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointGoal::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointGoal::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Joints& JointGoal::_internal_position() const {
  return *position_;
}
inline const ::abb::egm::wrapper::Joints& JointGoal::position() const {
  const ::abb::egm::wrapper::Joints* p = position_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.JointGoal.position)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Joints*>(
      &::abb::egm::wrapper::_Joints_default_instance_);
}
inline ::abb::egm::wrapper::Joints* JointGoal::release_position() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.JointGoal.position)
  clear_has_position();
  ::abb::egm::wrapper::Joints* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Joints* JointGoal::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Joints>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.JointGoal.position)
  return position_;
}
inline void JointGoal::set_allocated_position(::abb::egm::wrapper::Joints* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.JointGoal.position)
}

// optional .abb.egm.wrapper.Joints velocity = 2;
inline bool JointGoal::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JointGoal::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JointGoal::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::Joints& JointGoal::_internal_velocity() const {
  return *velocity_;
}
inline const ::abb::egm::wrapper::Joints& JointGoal::velocity() const {
  const ::abb::egm::wrapper::Joints* p = velocity_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.JointGoal.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Joints*>(
      &::abb::egm::wrapper::_Joints_default_instance_);
}
inline ::abb::egm::wrapper::Joints* JointGoal::release_velocity() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.JointGoal.velocity)
  clear_has_velocity();
  ::abb::egm::wrapper::Joints* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Joints* JointGoal::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Joints>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.JointGoal.velocity)
  return velocity_;
}
inline void JointGoal::set_allocated_velocity(::abb::egm::wrapper::Joints* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.JointGoal.velocity)
}

// optional .abb.egm.wrapper.Joints acceleration = 3;
inline bool JointGoal::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JointGoal::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JointGoal::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::abb::egm::wrapper::Joints& JointGoal::_internal_acceleration() const {
  return *acceleration_;
}
inline const ::abb::egm::wrapper::Joints& JointGoal::acceleration() const {
  const ::abb::egm::wrapper::Joints* p = acceleration_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.JointGoal.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Joints*>(
      &::abb::egm::wrapper::_Joints_default_instance_);
}
inline ::abb::egm::wrapper::Joints* JointGoal::release_acceleration() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.JointGoal.acceleration)
  clear_has_acceleration();
  ::abb::egm::wrapper::Joints* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Joints* JointGoal::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Joints>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.JointGoal.acceleration)
  return acceleration_;
}
inline void JointGoal::set_allocated_acceleration(::abb::egm::wrapper::Joints* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.JointGoal.acceleration)
}

// -------------------------------------------------------------------

// CartesianGoal

// optional .abb.egm.wrapper.CartesianPose pose = 1;
inline bool CartesianGoal::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CartesianGoal::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CartesianGoal::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::CartesianPose& CartesianGoal::_internal_pose() const {
  return *pose_;
}
inline const ::abb::egm::wrapper::CartesianPose& CartesianGoal::pose() const {
  const ::abb::egm::wrapper::CartesianPose* p = pose_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.CartesianGoal.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::CartesianPose*>(
      &::abb::egm::wrapper::_CartesianPose_default_instance_);
}
inline ::abb::egm::wrapper::CartesianPose* CartesianGoal::release_pose() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.CartesianGoal.pose)
  clear_has_pose();
  ::abb::egm::wrapper::CartesianPose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::CartesianPose* CartesianGoal::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::CartesianPose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.CartesianGoal.pose)
  return pose_;
}
inline void CartesianGoal::set_allocated_pose(::abb::egm::wrapper::CartesianPose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.CartesianGoal.pose)
}

// optional .abb.egm.wrapper.Cartesian velocity = 2;
inline bool CartesianGoal::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CartesianGoal::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CartesianGoal::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::Cartesian& CartesianGoal::_internal_velocity() const {
  return *velocity_;
}
inline const ::abb::egm::wrapper::Cartesian& CartesianGoal::velocity() const {
  const ::abb::egm::wrapper::Cartesian* p = velocity_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.CartesianGoal.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Cartesian*>(
      &::abb::egm::wrapper::_Cartesian_default_instance_);
}
inline ::abb::egm::wrapper::Cartesian* CartesianGoal::release_velocity() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.CartesianGoal.velocity)
  clear_has_velocity();
  ::abb::egm::wrapper::Cartesian* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Cartesian* CartesianGoal::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Cartesian>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.CartesianGoal.velocity)
  return velocity_;
}
inline void CartesianGoal::set_allocated_velocity(::abb::egm::wrapper::Cartesian* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.CartesianGoal.velocity)
}

// optional .abb.egm.wrapper.Cartesian acceleration = 3;
inline bool CartesianGoal::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CartesianGoal::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CartesianGoal::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::abb::egm::wrapper::Cartesian& CartesianGoal::_internal_acceleration() const {
  return *acceleration_;
}
inline const ::abb::egm::wrapper::Cartesian& CartesianGoal::acceleration() const {
  const ::abb::egm::wrapper::Cartesian* p = acceleration_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.CartesianGoal.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Cartesian*>(
      &::abb::egm::wrapper::_Cartesian_default_instance_);
}
inline ::abb::egm::wrapper::Cartesian* CartesianGoal::release_acceleration() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.CartesianGoal.acceleration)
  clear_has_acceleration();
  ::abb::egm::wrapper::Cartesian* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Cartesian* CartesianGoal::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Cartesian>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.CartesianGoal.acceleration)
  return acceleration_;
}
inline void CartesianGoal::set_allocated_acceleration(::abb::egm::wrapper::Cartesian* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.CartesianGoal.acceleration)
}

// -------------------------------------------------------------------

// RobotGoal

// optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
inline bool RobotGoal::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotGoal::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotGoal::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotGoal::clear_joints() {
  if (joints_ != NULL) joints_->Clear();
  clear_has_joints();
}
inline const ::abb::egm::wrapper::trajectory::JointGoal& RobotGoal::_internal_joints() const {
  return *joints_;
}
inline const ::abb::egm::wrapper::trajectory::JointGoal& RobotGoal::joints() const {
  const ::abb::egm::wrapper::trajectory::JointGoal* p = joints_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotGoal.joints)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::trajectory::JointGoal*>(
      &::abb::egm::wrapper::trajectory::_JointGoal_default_instance_);
}
inline ::abb::egm::wrapper::trajectory::JointGoal* RobotGoal::release_joints() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.RobotGoal.joints)
  clear_has_joints();
  ::abb::egm::wrapper::trajectory::JointGoal* temp = joints_;
  joints_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::trajectory::JointGoal* RobotGoal::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::trajectory::JointGoal>(GetArenaNoVirtual());
    joints_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotGoal.joints)
  return joints_;
}
inline void RobotGoal::set_allocated_joints(::abb::egm::wrapper::trajectory::JointGoal* joints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete joints_;
  }
  if (joints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      joints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, joints, submessage_arena);
    }
    set_has_joints();
  } else {
    clear_has_joints();
  }
  joints_ = joints;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotGoal.joints)
}

// optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
inline bool RobotGoal::has_cartesian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotGoal::set_has_cartesian() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotGoal::clear_has_cartesian() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotGoal::clear_cartesian() {
  if (cartesian_ != NULL) cartesian_->Clear();
  clear_has_cartesian();
}
inline const ::abb::egm::wrapper::trajectory::CartesianGoal& RobotGoal::_internal_cartesian() const {
  return *cartesian_;
}
inline const ::abb::egm::wrapper::trajectory::CartesianGoal& RobotGoal::cartesian() const {
  const ::abb::egm::wrapper::trajectory::CartesianGoal* p = cartesian_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotGoal.cartesian)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::trajectory::CartesianGoal*>(
      &::abb::egm::wrapper::trajectory::_CartesianGoal_default_instance_);
}
inline ::abb::egm::wrapper::trajectory::CartesianGoal* RobotGoal::release_cartesian() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.RobotGoal.cartesian)
  clear_has_cartesian();
  ::abb::egm::wrapper::trajectory::CartesianGoal* temp = cartesian_;
  cartesian_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::trajectory::CartesianGoal* RobotGoal::mutable_cartesian() {
  set_has_cartesian();
  if (cartesian_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::trajectory::CartesianGoal>(GetArenaNoVirtual());
    cartesian_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotGoal.cartesian)
  return cartesian_;
}
inline void RobotGoal::set_allocated_cartesian(::abb::egm::wrapper::trajectory::CartesianGoal* cartesian) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cartesian_;
  }
  if (cartesian) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cartesian = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cartesian, submessage_arena);
    }
    set_has_cartesian();
  } else {
    clear_has_cartesian();
  }
  cartesian_ = cartesian;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotGoal.cartesian)
}

// -------------------------------------------------------------------

// ExternalGoal

// optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
inline bool ExternalGoal::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalGoal::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternalGoal::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternalGoal::clear_joints() {
  if (joints_ != NULL) joints_->Clear();
  clear_has_joints();
}
inline const ::abb::egm::wrapper::trajectory::JointGoal& ExternalGoal::_internal_joints() const {
  return *joints_;
}
inline const ::abb::egm::wrapper::trajectory::JointGoal& ExternalGoal::joints() const {
  const ::abb::egm::wrapper::trajectory::JointGoal* p = joints_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExternalGoal.joints)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::trajectory::JointGoal*>(
      &::abb::egm::wrapper::trajectory::_JointGoal_default_instance_);
}
inline ::abb::egm::wrapper::trajectory::JointGoal* ExternalGoal::release_joints() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.ExternalGoal.joints)
  clear_has_joints();
  ::abb::egm::wrapper::trajectory::JointGoal* temp = joints_;
  joints_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::trajectory::JointGoal* ExternalGoal::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::trajectory::JointGoal>(GetArenaNoVirtual());
    joints_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExternalGoal.joints)
  return joints_;
}
inline void ExternalGoal::set_allocated_joints(::abb::egm::wrapper::trajectory::JointGoal* joints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete joints_;
  }
  if (joints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      joints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, joints, submessage_arena);
    }
    set_has_joints();
  } else {
    clear_has_joints();
  }
  joints_ = joints;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExternalGoal.joints)
}

// -------------------------------------------------------------------

// PointGoal

// optional double duration = 1;
inline bool PointGoal::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointGoal::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointGoal::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointGoal::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double PointGoal::duration() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.PointGoal.duration)
  return duration_;
}
inline void PointGoal::set_duration(double value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.PointGoal.duration)
}

// optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
inline bool PointGoal::has_robot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointGoal::set_has_robot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointGoal::clear_has_robot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointGoal::clear_robot() {
  if (robot_ != NULL) robot_->Clear();
  clear_has_robot();
}
inline const ::abb::egm::wrapper::trajectory::RobotGoal& PointGoal::_internal_robot() const {
  return *robot_;
}
inline const ::abb::egm::wrapper::trajectory::RobotGoal& PointGoal::robot() const {
  const ::abb::egm::wrapper::trajectory::RobotGoal* p = robot_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.PointGoal.robot)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::trajectory::RobotGoal*>(
      &::abb::egm::wrapper::trajectory::_RobotGoal_default_instance_);
}
inline ::abb::egm::wrapper::trajectory::RobotGoal* PointGoal::release_robot() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.PointGoal.robot)
  clear_has_robot();
  ::abb::egm::wrapper::trajectory::RobotGoal* temp = robot_;
  robot_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::trajectory::RobotGoal* PointGoal::mutable_robot() {
  set_has_robot();
  if (robot_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::trajectory::RobotGoal>(GetArenaNoVirtual());
    robot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.PointGoal.robot)
  return robot_;
}
inline void PointGoal::set_allocated_robot(::abb::egm::wrapper::trajectory::RobotGoal* robot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete robot_;
  }
  if (robot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      robot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, robot, submessage_arena);
    }
    set_has_robot();
  } else {
    clear_has_robot();
  }
  robot_ = robot;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.PointGoal.robot)
}

// optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
inline bool PointGoal::has_external() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointGoal::set_has_external() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointGoal::clear_has_external() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointGoal::clear_external() {
  if (external_ != NULL) external_->Clear();
  clear_has_external();
}
inline const ::abb::egm::wrapper::trajectory::ExternalGoal& PointGoal::_internal_external() const {
  return *external_;
}
inline const ::abb::egm::wrapper::trajectory::ExternalGoal& PointGoal::external() const {
  const ::abb::egm::wrapper::trajectory::ExternalGoal* p = external_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.PointGoal.external)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::trajectory::ExternalGoal*>(
      &::abb::egm::wrapper::trajectory::_ExternalGoal_default_instance_);
}
inline ::abb::egm::wrapper::trajectory::ExternalGoal* PointGoal::release_external() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.PointGoal.external)
  clear_has_external();
  ::abb::egm::wrapper::trajectory::ExternalGoal* temp = external_;
  external_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::trajectory::ExternalGoal* PointGoal::mutable_external() {
  set_has_external();
  if (external_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::trajectory::ExternalGoal>(GetArenaNoVirtual());
    external_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.PointGoal.external)
  return external_;
}
inline void PointGoal::set_allocated_external(::abb::egm::wrapper::trajectory::ExternalGoal* external) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete external_;
  }
  if (external) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      external = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, external, submessage_arena);
    }
    set_has_external();
  } else {
    clear_has_external();
  }
  external_ = external;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.PointGoal.external)
}

// optional bool reach = 4;
inline bool PointGoal::has_reach() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointGoal::set_has_reach() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointGoal::clear_has_reach() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointGoal::clear_reach() {
  reach_ = false;
  clear_has_reach();
}
inline bool PointGoal::reach() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.PointGoal.reach)
  return reach_;
}
inline void PointGoal::set_reach(bool value) {
  set_has_reach();
  reach_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.PointGoal.reach)
}

// -------------------------------------------------------------------

// RobotPositionGoal

// optional .abb.egm.wrapper.Joints joints = 1;
inline bool RobotPositionGoal::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotPositionGoal::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotPositionGoal::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Joints& RobotPositionGoal::_internal_joints() const {
  return *joints_;
}
inline const ::abb::egm::wrapper::Joints& RobotPositionGoal::joints() const {
  const ::abb::egm::wrapper::Joints* p = joints_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotPositionGoal.joints)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Joints*>(
      &::abb::egm::wrapper::_Joints_default_instance_);
}
inline ::abb::egm::wrapper::Joints* RobotPositionGoal::release_joints() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.RobotPositionGoal.joints)
  clear_has_joints();
  ::abb::egm::wrapper::Joints* temp = joints_;
  joints_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Joints* RobotPositionGoal::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Joints>(GetArenaNoVirtual());
    joints_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotPositionGoal.joints)
  return joints_;
}
inline void RobotPositionGoal::set_allocated_joints(::abb::egm::wrapper::Joints* joints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(joints_);
  }
  if (joints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      joints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, joints, submessage_arena);
    }
    set_has_joints();
  } else {
    clear_has_joints();
  }
  joints_ = joints;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotPositionGoal.joints)
}

// optional .abb.egm.wrapper.CartesianPose cartesian = 2;
inline bool RobotPositionGoal::has_cartesian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotPositionGoal::set_has_cartesian() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotPositionGoal::clear_has_cartesian() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::CartesianPose& RobotPositionGoal::_internal_cartesian() const {
  return *cartesian_;
}
inline const ::abb::egm::wrapper::CartesianPose& RobotPositionGoal::cartesian() const {
  const ::abb::egm::wrapper::CartesianPose* p = cartesian_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotPositionGoal.cartesian)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::CartesianPose*>(
      &::abb::egm::wrapper::_CartesianPose_default_instance_);
}
inline ::abb::egm::wrapper::CartesianPose* RobotPositionGoal::release_cartesian() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.RobotPositionGoal.cartesian)
  clear_has_cartesian();
  ::abb::egm::wrapper::CartesianPose* temp = cartesian_;
  cartesian_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::CartesianPose* RobotPositionGoal::mutable_cartesian() {
  set_has_cartesian();
  if (cartesian_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::CartesianPose>(GetArenaNoVirtual());
    cartesian_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotPositionGoal.cartesian)
  return cartesian_;
}
inline void RobotPositionGoal::set_allocated_cartesian(::abb::egm::wrapper::CartesianPose* cartesian) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cartesian_);
  }
  if (cartesian) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cartesian = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cartesian, submessage_arena);
    }
    set_has_cartesian();
  } else {
    clear_has_cartesian();
  }
  cartesian_ = cartesian;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotPositionGoal.cartesian)
}

// -------------------------------------------------------------------

// RobotVelocityGoal

// optional .abb.egm.wrapper.Joints joints = 1;
inline bool RobotVelocityGoal::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotVelocityGoal::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotVelocityGoal::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Joints& RobotVelocityGoal::_internal_joints() const {
  return *joints_;
}
inline const ::abb::egm::wrapper::Joints& RobotVelocityGoal::joints() const {
  const ::abb::egm::wrapper::Joints* p = joints_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotVelocityGoal.joints)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Joints*>(
      &::abb::egm::wrapper::_Joints_default_instance_);
}
inline ::abb::egm::wrapper::Joints* RobotVelocityGoal::release_joints() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.RobotVelocityGoal.joints)
  clear_has_joints();
  ::abb::egm::wrapper::Joints* temp = joints_;
  joints_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Joints* RobotVelocityGoal::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Joints>(GetArenaNoVirtual());
    joints_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotVelocityGoal.joints)
  return joints_;
}
inline void RobotVelocityGoal::set_allocated_joints(::abb::egm::wrapper::Joints* joints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(joints_);
  }
  if (joints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      joints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, joints, submessage_arena);
    }
    set_has_joints();
  } else {
    clear_has_joints();
  }
  joints_ = joints;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotVelocityGoal.joints)
}

// optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
inline bool RobotVelocityGoal::has_cartesian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotVelocityGoal::set_has_cartesian() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotVelocityGoal::clear_has_cartesian() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::CartesianVelocity& RobotVelocityGoal::_internal_cartesian() const {
  return *cartesian_;
}
inline const ::abb::egm::wrapper::CartesianVelocity& RobotVelocityGoal::cartesian() const {
  const ::abb::egm::wrapper::CartesianVelocity* p = cartesian_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotVelocityGoal.cartesian)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::CartesianVelocity*>(
      &::abb::egm::wrapper::_CartesianVelocity_default_instance_);
}
inline ::abb::egm::wrapper::CartesianVelocity* RobotVelocityGoal::release_cartesian() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.RobotVelocityGoal.cartesian)
  clear_has_cartesian();
  ::abb::egm::wrapper::CartesianVelocity* temp = cartesian_;
  cartesian_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::CartesianVelocity* RobotVelocityGoal::mutable_cartesian() {
  set_has_cartesian();
  if (cartesian_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::CartesianVelocity>(GetArenaNoVirtual());
    cartesian_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotVelocityGoal.cartesian)
  return cartesian_;
}
inline void RobotVelocityGoal::set_allocated_cartesian(::abb::egm::wrapper::CartesianVelocity* cartesian) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cartesian_);
  }
  if (cartesian) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cartesian = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cartesian, submessage_arena);
    }
    set_has_cartesian();
  } else {
    clear_has_cartesian();
  }
  cartesian_ = cartesian;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotVelocityGoal.cartesian)
}

// -------------------------------------------------------------------

// TrajectoryGoal

// repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
inline int TrajectoryGoal::points_size() const {
  return points_.size();
}
inline void TrajectoryGoal::clear_points() {
  points_.Clear();
}
inline ::abb::egm::wrapper::trajectory::PointGoal* TrajectoryGoal::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal >*
TrajectoryGoal::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return &points_;
}
inline const ::abb::egm::wrapper::trajectory::PointGoal& TrajectoryGoal::points(int index) const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return points_.Get(index);
}
inline ::abb::egm::wrapper::trajectory::PointGoal* TrajectoryGoal::add_points() {
  // @@protoc_insertion_point(field_add:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal >&
TrajectoryGoal::points() const {
  // @@protoc_insertion_point(field_list:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return points_;
}

// -------------------------------------------------------------------

// StaticPositionGoal

// optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
inline bool StaticPositionGoal::has_robot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StaticPositionGoal::set_has_robot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StaticPositionGoal::clear_has_robot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StaticPositionGoal::clear_robot() {
  if (robot_ != NULL) robot_->Clear();
  clear_has_robot();
}
inline const ::abb::egm::wrapper::trajectory::RobotPositionGoal& StaticPositionGoal::_internal_robot() const {
  return *robot_;
}
inline const ::abb::egm::wrapper::trajectory::RobotPositionGoal& StaticPositionGoal::robot() const {
  const ::abb::egm::wrapper::trajectory::RobotPositionGoal* p = robot_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.StaticPositionGoal.robot)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::trajectory::RobotPositionGoal*>(
      &::abb::egm::wrapper::trajectory::_RobotPositionGoal_default_instance_);
}
inline ::abb::egm::wrapper::trajectory::RobotPositionGoal* StaticPositionGoal::release_robot() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.StaticPositionGoal.robot)
  clear_has_robot();
  ::abb::egm::wrapper::trajectory::RobotPositionGoal* temp = robot_;
  robot_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::trajectory::RobotPositionGoal* StaticPositionGoal::mutable_robot() {
  set_has_robot();
  if (robot_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::trajectory::RobotPositionGoal>(GetArenaNoVirtual());
    robot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.StaticPositionGoal.robot)
  return robot_;
}
inline void StaticPositionGoal::set_allocated_robot(::abb::egm::wrapper::trajectory::RobotPositionGoal* robot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete robot_;
  }
  if (robot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      robot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, robot, submessage_arena);
    }
    set_has_robot();
  } else {
    clear_has_robot();
  }
  robot_ = robot;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.StaticPositionGoal.robot)
}

// optional .abb.egm.wrapper.Joints external = 2;
inline bool StaticPositionGoal::has_external() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StaticPositionGoal::set_has_external() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StaticPositionGoal::clear_has_external() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::Joints& StaticPositionGoal::_internal_external() const {
  return *external_;
}
inline const ::abb::egm::wrapper::Joints& StaticPositionGoal::external() const {
  const ::abb::egm::wrapper::Joints* p = external_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.StaticPositionGoal.external)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Joints*>(
      &::abb::egm::wrapper::_Joints_default_instance_);
}
inline ::abb::egm::wrapper::Joints* StaticPositionGoal::release_external() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.StaticPositionGoal.external)
  clear_has_external();
  ::abb::egm::wrapper::Joints* temp = external_;
  external_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Joints* StaticPositionGoal::mutable_external() {
  set_has_external();
  if (external_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Joints>(GetArenaNoVirtual());
    external_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.StaticPositionGoal.external)
  return external_;
}
inline void StaticPositionGoal::set_allocated_external(::abb::egm::wrapper::Joints* external) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(external_);
  }
  if (external) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      external = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, external, submessage_arena);
    }
    set_has_external();
  } else {
    clear_has_external();
  }
  external_ = external;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.StaticPositionGoal.external)
}

// -------------------------------------------------------------------

// StaticVelocityGoal

// optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
inline bool StaticVelocityGoal::has_robot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StaticVelocityGoal::set_has_robot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StaticVelocityGoal::clear_has_robot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StaticVelocityGoal::clear_robot() {
  if (robot_ != NULL) robot_->Clear();
  clear_has_robot();
}
inline const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& StaticVelocityGoal::_internal_robot() const {
  return *robot_;
}
inline const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& StaticVelocityGoal::robot() const {
  const ::abb::egm::wrapper::trajectory::RobotVelocityGoal* p = robot_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.StaticVelocityGoal.robot)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::trajectory::RobotVelocityGoal*>(
      &::abb::egm::wrapper::trajectory::_RobotVelocityGoal_default_instance_);
}
inline ::abb::egm::wrapper::trajectory::RobotVelocityGoal* StaticVelocityGoal::release_robot() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.StaticVelocityGoal.robot)
  clear_has_robot();
  ::abb::egm::wrapper::trajectory::RobotVelocityGoal* temp = robot_;
  robot_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::trajectory::RobotVelocityGoal* StaticVelocityGoal::mutable_robot() {
  set_has_robot();
  if (robot_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::trajectory::RobotVelocityGoal>(GetArenaNoVirtual());
    robot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.StaticVelocityGoal.robot)
  return robot_;
}
inline void StaticVelocityGoal::set_allocated_robot(::abb::egm::wrapper::trajectory::RobotVelocityGoal* robot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete robot_;
  }
  if (robot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      robot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, robot, submessage_arena);
    }
    set_has_robot();
  } else {
    clear_has_robot();
  }
  robot_ = robot;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.StaticVelocityGoal.robot)
}

// optional .abb.egm.wrapper.Joints external = 2;
inline bool StaticVelocityGoal::has_external() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StaticVelocityGoal::set_has_external() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StaticVelocityGoal::clear_has_external() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::Joints& StaticVelocityGoal::_internal_external() const {
  return *external_;
}
inline const ::abb::egm::wrapper::Joints& StaticVelocityGoal::external() const {
  const ::abb::egm::wrapper::Joints* p = external_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.StaticVelocityGoal.external)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Joints*>(
      &::abb::egm::wrapper::_Joints_default_instance_);
}
inline ::abb::egm::wrapper::Joints* StaticVelocityGoal::release_external() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.StaticVelocityGoal.external)
  clear_has_external();
  ::abb::egm::wrapper::Joints* temp = external_;
  external_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Joints* StaticVelocityGoal::mutable_external() {
  set_has_external();
  if (external_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Joints>(GetArenaNoVirtual());
    external_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.StaticVelocityGoal.external)
  return external_;
}
inline void StaticVelocityGoal::set_allocated_external(::abb::egm::wrapper::Joints* external) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(external_);
  }
  if (external) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      external = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, external, submessage_arena);
    }
    set_has_external();
  } else {
    clear_has_external();
  }
  external_ = external;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.StaticVelocityGoal.external)
}

// -------------------------------------------------------------------

// ExecutionProgress

// optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
inline bool ExecutionProgress::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExecutionProgress::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExecutionProgress::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExecutionProgress::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::abb::egm::wrapper::trajectory::ExecutionProgress_State ExecutionProgress::state() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.state)
  return static_cast< ::abb::egm::wrapper::trajectory::ExecutionProgress_State >(state_);
}
inline void ExecutionProgress::set_state(::abb::egm::wrapper::trajectory::ExecutionProgress_State value) {
  assert(::abb::egm::wrapper::trajectory::ExecutionProgress_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.state)
}

// optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
inline bool ExecutionProgress::has_sub_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExecutionProgress::set_has_sub_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExecutionProgress::clear_has_sub_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExecutionProgress::clear_sub_state() {
  sub_state_ = 0;
  clear_has_sub_state();
}
inline ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState ExecutionProgress::sub_state() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.sub_state)
  return static_cast< ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState >(sub_state_);
}
inline void ExecutionProgress::set_sub_state(::abb::egm::wrapper::trajectory::ExecutionProgress_SubState value) {
  assert(::abb::egm::wrapper::trajectory::ExecutionProgress_SubState_IsValid(value));
  set_has_sub_state();
  sub_state_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.sub_state)
}

// optional .abb.egm.wrapper.Input inputs = 3;
inline bool ExecutionProgress::has_inputs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionProgress::set_has_inputs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionProgress::clear_has_inputs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Input& ExecutionProgress::_internal_inputs() const {
  return *inputs_;
}
inline const ::abb::egm::wrapper::Input& ExecutionProgress::inputs() const {
  const ::abb::egm::wrapper::Input* p = inputs_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.inputs)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Input*>(
      &::abb::egm::wrapper::_Input_default_instance_);
}
inline ::abb::egm::wrapper::Input* ExecutionProgress::release_inputs() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.ExecutionProgress.inputs)
  clear_has_inputs();
  ::abb::egm::wrapper::Input* temp = inputs_;
  inputs_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Input* ExecutionProgress::mutable_inputs() {
  set_has_inputs();
  if (inputs_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Input>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExecutionProgress.inputs)
  return inputs_;
}
inline void ExecutionProgress::set_allocated_inputs(::abb::egm::wrapper::Input* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    set_has_inputs();
  } else {
    clear_has_inputs();
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExecutionProgress.inputs)
}

// optional .abb.egm.wrapper.Output outputs = 4;
inline bool ExecutionProgress::has_outputs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecutionProgress::set_has_outputs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecutionProgress::clear_has_outputs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::Output& ExecutionProgress::_internal_outputs() const {
  return *outputs_;
}
inline const ::abb::egm::wrapper::Output& ExecutionProgress::outputs() const {
  const ::abb::egm::wrapper::Output* p = outputs_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.outputs)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Output*>(
      &::abb::egm::wrapper::_Output_default_instance_);
}
inline ::abb::egm::wrapper::Output* ExecutionProgress::release_outputs() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.ExecutionProgress.outputs)
  clear_has_outputs();
  ::abb::egm::wrapper::Output* temp = outputs_;
  outputs_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::Output* ExecutionProgress::mutable_outputs() {
  set_has_outputs();
  if (outputs_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Output>(GetArenaNoVirtual());
    outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExecutionProgress.outputs)
  return outputs_;
}
inline void ExecutionProgress::set_allocated_outputs(::abb::egm::wrapper::Output* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outputs_);
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    set_has_outputs();
  } else {
    clear_has_outputs();
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExecutionProgress.outputs)
}

// optional double time_passed = 5;
inline bool ExecutionProgress::has_time_passed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExecutionProgress::set_has_time_passed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExecutionProgress::clear_has_time_passed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExecutionProgress::clear_time_passed() {
  time_passed_ = 0;
  clear_has_time_passed();
}
inline double ExecutionProgress::time_passed() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.time_passed)
  return time_passed_;
}
inline void ExecutionProgress::set_time_passed(double value) {
  set_has_time_passed();
  time_passed_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.time_passed)
}

// optional bool goal_active = 6;
inline bool ExecutionProgress::has_goal_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExecutionProgress::set_has_goal_active() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExecutionProgress::clear_has_goal_active() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExecutionProgress::clear_goal_active() {
  goal_active_ = false;
  clear_has_goal_active();
}
inline bool ExecutionProgress::goal_active() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.goal_active)
  return goal_active_;
}
inline void ExecutionProgress::set_goal_active(bool value) {
  set_has_goal_active();
  goal_active_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.goal_active)
}

// optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
inline bool ExecutionProgress::has_goal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExecutionProgress::set_has_goal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExecutionProgress::clear_has_goal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExecutionProgress::clear_goal() {
  if (goal_ != NULL) goal_->Clear();
  clear_has_goal();
}
inline const ::abb::egm::wrapper::trajectory::PointGoal& ExecutionProgress::_internal_goal() const {
  return *goal_;
}
inline const ::abb::egm::wrapper::trajectory::PointGoal& ExecutionProgress::goal() const {
  const ::abb::egm::wrapper::trajectory::PointGoal* p = goal_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.goal)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::trajectory::PointGoal*>(
      &::abb::egm::wrapper::trajectory::_PointGoal_default_instance_);
}
inline ::abb::egm::wrapper::trajectory::PointGoal* ExecutionProgress::release_goal() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.ExecutionProgress.goal)
  clear_has_goal();
  ::abb::egm::wrapper::trajectory::PointGoal* temp = goal_;
  goal_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::trajectory::PointGoal* ExecutionProgress::mutable_goal() {
  set_has_goal();
  if (goal_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::trajectory::PointGoal>(GetArenaNoVirtual());
    goal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExecutionProgress.goal)
  return goal_;
}
inline void ExecutionProgress::set_allocated_goal(::abb::egm::wrapper::trajectory::PointGoal* goal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete goal_;
  }
  if (goal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      goal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, goal, submessage_arena);
    }
    set_has_goal();
  } else {
    clear_has_goal();
  }
  goal_ = goal;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExecutionProgress.goal)
}

// optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
inline bool ExecutionProgress::has_active_trajectory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExecutionProgress::set_has_active_trajectory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExecutionProgress::clear_has_active_trajectory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExecutionProgress::clear_active_trajectory() {
  if (active_trajectory_ != NULL) active_trajectory_->Clear();
  clear_has_active_trajectory();
}
inline const ::abb::egm::wrapper::trajectory::TrajectoryGoal& ExecutionProgress::_internal_active_trajectory() const {
  return *active_trajectory_;
}
inline const ::abb::egm::wrapper::trajectory::TrajectoryGoal& ExecutionProgress::active_trajectory() const {
  const ::abb::egm::wrapper::trajectory::TrajectoryGoal* p = active_trajectory_;
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.active_trajectory)
  return p != NULL ? *p : *reinterpret_cast<const ::abb::egm::wrapper::trajectory::TrajectoryGoal*>(
      &::abb::egm::wrapper::trajectory::_TrajectoryGoal_default_instance_);
}
inline ::abb::egm::wrapper::trajectory::TrajectoryGoal* ExecutionProgress::release_active_trajectory() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.trajectory.ExecutionProgress.active_trajectory)
  clear_has_active_trajectory();
  ::abb::egm::wrapper::trajectory::TrajectoryGoal* temp = active_trajectory_;
  active_trajectory_ = NULL;
  return temp;
}
inline ::abb::egm::wrapper::trajectory::TrajectoryGoal* ExecutionProgress::mutable_active_trajectory() {
  set_has_active_trajectory();
  if (active_trajectory_ == NULL) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::trajectory::TrajectoryGoal>(GetArenaNoVirtual());
    active_trajectory_ = p;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExecutionProgress.active_trajectory)
  return active_trajectory_;
}
inline void ExecutionProgress::set_allocated_active_trajectory(::abb::egm::wrapper::trajectory::TrajectoryGoal* active_trajectory) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete active_trajectory_;
  }
  if (active_trajectory) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      active_trajectory = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, active_trajectory, submessage_arena);
    }
    set_has_active_trajectory();
  } else {
    clear_has_active_trajectory();
  }
  active_trajectory_ = active_trajectory;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExecutionProgress.active_trajectory)
}

// optional uint32 pending_trajectories = 9;
inline bool ExecutionProgress::has_pending_trajectories() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExecutionProgress::set_has_pending_trajectories() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExecutionProgress::clear_has_pending_trajectories() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExecutionProgress::clear_pending_trajectories() {
  pending_trajectories_ = 0u;
  clear_has_pending_trajectories();
}
inline ::google::protobuf::uint32 ExecutionProgress::pending_trajectories() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.pending_trajectories)
  return pending_trajectories_;
}
inline void ExecutionProgress::set_pending_trajectories(::google::protobuf::uint32 value) {
  set_has_pending_trajectories();
  pending_trajectories_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.pending_trajectories)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trajectory
}  // namespace wrapper
}  // namespace egm
}  // namespace abb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::abb::egm::wrapper::trajectory::ExecutionProgress_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::abb::egm::wrapper::trajectory::ExecutionProgress_State>() {
  return ::abb::egm::wrapper::trajectory::ExecutionProgress_State_descriptor();
}
template <> struct is_proto_enum< ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState>() {
  return ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_egm_5fwrapper_5ftrajectory_2eproto
