/***********************************************************************************************************************
 *
 * Copyright (c) 2015, ABB Schweiz AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with
 * or without modification, are permitted provided that
 * the following conditions are met:
 *
 *    * Redistributions of source code must retain the
 *      above copyright notice, this list of conditions
 *      and the following disclaimer.
 *    * Redistributions in binary form must reproduce the
 *      above copyright notice, this list of conditions
 *      and the following disclaimer in the documentation
 *      and/or other materials provided with the
 *      distribution.
 *    * Neither the name of ABB nor the names of its
 *      contributors may be used to endorse or promote
 *      products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ***********************************************************************************************************************
 */

#ifndef EGM_LOGGER_H
#define EGM_LOGGER_H

#include <fstream>

#include "abb_libegm_export.h"

#include "egm_wrapper.pb.h" // Generated by Google Protocol Buffer compiler protoc

namespace abb
{
namespace egm
{
/**
 * \brief Class for logging EGM messages into CSV formatted file.
 */
class EGMLogger
{
public:
  /**
   * \brief A constructor.
   *
   * \param filename specifying the log's filename.
   * \param use_default_header specifying if the default headers should be used in the log.
   */
  EGMLogger(const std::string& filename, const bool use_default_headers = true);

  /**
   * \brief A destructor.
   */
  ~EGMLogger();

  /**
   * \brief Flush the stream object.
   */
  void flush();

  /**
   * \brief Add header data to the log stream.
   *
   * \param header containing the header data to add.
   */
  void add(const wrapper::Header& header);

  /**
   * \brief Add joint data (i.e. robot and external joints) to the log stream.
   *
   * \param robot containing the robot joint data to add.
   * \param external containing the external joint data to add.
   */
  void add(const wrapper::Joints& robot, const wrapper::Joints& external);

  /**
   * \brief Add Cartesian pose data to the log stream.
   *
   * \param pose containing the pose data to add.
   */
  void add(const wrapper::CartesianPose& pose);

  /**
   * \brief Add Cartesian velocity data to the log stream.
   *
   * \param velocity containing the velocity data to add.
   * \param last indicating if it is the last addition to current the log event.
   */
  void add(const wrapper::CartesianVelocity& velocity, const bool last = false);

  /**
   * \brief Calculate the amount of time logged.
   *
   * \param sample_time specifying the sample time.
   *
   * \return double for the time logged.
   */
  double calculateTimeLogged(const double sample_time);

private:
  /**
   * \brief Add mock values for missing joint data to the log stream.
   *
   * \param robot indicating if it is robot joints to add or not (otherwise external joints).
   * \param robot_size of the robot joint container.
   * \param external_size of the external joint container.
   */
  void addMockJoints(const bool robot, const size_t robot_size, const size_t external_size);

  /**
   * \brief The number of logged messages.
   */
  unsigned int number_of_logged_messages_;

  /**
   * \brief Stream object for logging data.
   */
  std::ofstream log_stream_;
};

} // end namespace egm
} // end namespace abb

#endif // EGM_LOGGER_H
